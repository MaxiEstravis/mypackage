[{"path":"https://maxiestravis.github.io/mypackage/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 mypackage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://maxiestravis.github.io/mypackage/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maxi Estravis. Author, maintainer.","code":""},{"path":"https://maxiestravis.github.io/mypackage/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Estravis M (2023). mypackage: Toy string manipulation. https://github.com/MaxiEstravis/mypackage, https://maxiestravis.github.io/mypackage/.","code":"@Manual{,   title = {mypackage: Toy string manipulation},   author = {Maxi Estravis},   year = {2023},   note = {https://github.com/MaxiEstravis/mypackage, https://maxiestravis.github.io/mypackage/}, }"},{"path":"https://maxiestravis.github.io/mypackage/index.html","id":"mypackage","dir":"","previous_headings":"","what":"Toy string manipulation","title":"Toy string manipulation","text":"goal mypackage make regular expressions exciting! provides convenience functions make common tasks string manipulation regular expressions bit easier.","code":""},{"path":"https://maxiestravis.github.io/mypackage/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Toy string manipulation","text":"can install development version mypackage GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"MaxiEstravis/mypackage\")"},{"path":"https://maxiestravis.github.io/mypackage/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Toy string manipulation","text":"fairly common task dealing strings need split single string many parts. base::strplit() stringr::str_split() . Notice return value list length one, first element holds character vector parts. Often shape output inconvenient, .e. want un-listed version. ’s exactly mypackage::str_split_one() . Use str_split_one() input known single string. safety, error input length greater one. str_split_one() built stringr::str_split(), can use n argument stringr’s general interface describing pattern matched.","code":"(x <- \"alfa,bravo,charlie,delta\") #> [1] \"alfa,bravo,charlie,delta\" strsplit(x, split = \",\") #> [[1]] #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\" stringr::str_split(x, pattern = \",\") #> [[1]] #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\" library(mypackage)  str_split_one(x, pattern = \",\") #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\" str_split_one(x, pattern = \",\", n = 2) #> [1] \"alfa\"                \"bravo,charlie,delta\"  y <- \"192.168.0.1\" str_split_one(y, pattern = stringr::fixed(\".\")) #> [1] \"192\" \"168\" \"0\"   \"1\""},{"path":"https://maxiestravis.github.io/mypackage/reference/str_split_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a string into a char vector — str_split_one","title":"Split a string into a char vector — str_split_one","text":"Split string char vector","code":""},{"path":"https://maxiestravis.github.io/mypackage/reference/str_split_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a string into a char vector — str_split_one","text":"","code":"str_split_one(string, pattern, n = Inf)"},{"path":"https://maxiestravis.github.io/mypackage/reference/str_split_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a string into a char vector — str_split_one","text":"string character vector one element pattern split n Maximum number pieces return (default = Inf)","code":""},{"path":"https://maxiestravis.github.io/mypackage/reference/str_split_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a string into a char vector — str_split_one","text":"character vector","code":""},{"path":"https://maxiestravis.github.io/mypackage/reference/str_split_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a string into a char vector — str_split_one","text":"","code":"x <- \"alfa,bravo,charlie,delta\" str_split_one(string = x, pattern = \",\") #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\""}]
